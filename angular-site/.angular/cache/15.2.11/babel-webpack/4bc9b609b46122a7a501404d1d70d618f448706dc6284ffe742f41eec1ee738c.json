{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/user.service\";\nimport * as i3 from \"../../services/toast.service\";\nimport * as i4 from \"@angular/common\";\nfunction AuthModalComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username must be at least 3 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_11_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_11_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.authForm.get(\"username\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.authForm.get(\"username\")) == null ? null : tmp_1_0.hasError(\"minlength\"));\n  }\n}\nfunction AuthModalComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_16_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password must be at least 6 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_16_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_16_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.authForm.get(\"password\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.authForm.get(\"password\")) == null ? null : tmp_1_0.hasError(\"minlength\"));\n  }\n}\nfunction AuthModalComponent_div_17_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_17_div_4_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email must be a valid email address.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_17_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_17_div_4_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_17_div_4_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r7.authForm.get(\"email\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r7.authForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"email\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"mb-6\": a0\n  };\n};\nfunction AuthModalComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"label\", 17);\n    i0.ɵɵtext(2, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵtemplate(4, AuthModalComponent_div_17_div_4_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r2.hasErrors(\"email\")));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r2.authForm.get(\"email\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx_r2.authForm.get(\"email\")) == null ? null : tmp_1_0.touched));\n  }\n}\nexport let AuthModalComponent = /*#__PURE__*/(() => {\n  class AuthModalComponent {\n    constructor(fb, userService, toastService) {\n      this.fb = fb;\n      this.userService = userService;\n      this.toastService = toastService;\n      this.close = new EventEmitter();\n      this.isRegisterMode = false;\n      this.isProfileMode = false;\n      this.authForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(3)]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        email: [''] // Only required during registration or profile update\n      });\n      // Directly assign the observable\n      this.currentUser$ = this.userService.currentUser$;\n    }\n    ngOnInit() {\n      this.currentUser$.subscribe(user => this.initializeFormForUser(user));\n    }\n    initializeFormForUser(user) {\n      if (user) {\n        this.isProfileMode = true;\n        this.authForm.patchValue(user);\n      } else {\n        this.isProfileMode = false;\n        this.authForm.reset();\n      }\n    }\n    handleEscape(event) {\n      this.closeModal();\n    }\n    toggleMode() {\n      this.isRegisterMode = !this.isRegisterMode;\n      this.isProfileMode = false;\n      this.updateEmailValidators();\n      this.resetForm();\n    }\n    updateEmailValidators() {\n      if (this.isRegisterMode) {\n        this.authForm.get('email')?.setValidators([Validators.required, Validators.email]);\n      } else {\n        this.authForm.get('email')?.clearValidators();\n      }\n      this.authForm.get('email')?.updateValueAndValidity();\n    }\n    resetForm() {\n      this.authForm.reset();\n      Object.keys(this.authForm.controls).forEach(control => {\n        this.authForm.get(control)?.markAsUntouched();\n      });\n    }\n    onSubmit() {\n      if (this.authForm.invalid) {\n        this.authForm.markAllAsTouched();\n        return;\n      }\n      if (this.isProfileMode) {\n        this.updateProfile();\n      } else if (this.isRegisterMode) {\n        this.registerUser();\n      } else {\n        this.loginUser();\n      }\n      this.authForm.reset();\n      this.closeModal();\n    }\n    updateProfile() {\n      this.currentUser$.subscribe(user => {\n        if (user) {\n          const updatedUser = {\n            ...user,\n            ...this.authForm.value\n          };\n          this.userService.updateUser(updatedUser.id, updatedUser);\n          this.toastService.showToast({\n            message: 'Profile updated successfully',\n            type: 'success'\n          });\n        }\n      });\n    }\n    registerUser() {\n      const {\n        username,\n        password,\n        email\n      } = this.authForm.value;\n      if (this.userService.userExists(username)) {\n        this.toastService.showToast({\n          message: 'Username already exists',\n          type: 'error'\n        });\n        return;\n      }\n      const newUser = {\n        username,\n        password,\n        email\n      };\n      this.userService.addUser(newUser);\n      this.userService.setCurrentUser(newUser);\n      this.toastService.showToast({\n        message: 'Registration successful',\n        type: 'success'\n      });\n    }\n    loginUser() {\n      const {\n        username,\n        password\n      } = this.authForm.value;\n      const user = this.userService.login(username, password);\n      if (user) {\n        this.userService.setCurrentUser(user);\n        this.toastService.showToast({\n          message: 'Login successful',\n          type: 'success'\n        });\n      } else {\n        this.toastService.showToast({\n          message: 'Invalid username or password',\n          type: 'error'\n        });\n      }\n    }\n    hasErrors(controlName) {\n      const control = this.authForm.get(controlName);\n      return control ? control.invalid && control.touched : false;\n    }\n    closeModal() {\n      this.close.emit();\n    }\n    static #_ = this.ɵfac = function AuthModalComponent_Factory(t) {\n      return new (t || AuthModalComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ToastService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AuthModalComponent,\n      selectors: [[\"app-auth-modal\"]],\n      hostBindings: function AuthModalComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown.escape\", function AuthModalComponent_keydown_escape_HostBindingHandler($event) {\n            return ctx.handleEscape($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      outputs: {\n        close: \"close\"\n      },\n      decls: 23,\n      vars: 13,\n      consts: [[1, \"fixed\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"bg-black\", \"bg-opacity-50\", \"z-50\"], [1, \"relative\", \"bg-white\", \"rounded-lg\", \"shadow-lg\", \"p-6\", \"max-w-md\", \"w-full\"], [1, \"absolute\", \"top-2\", \"right-2\", \"text-gray-500\", \"hover:text-gray-700\", \"text-3xl\", \"leading-none\", \"focus:outline-none\", 3, \"click\"], [1, \"text-2xl\", \"font-semibold\", \"mb-4\", \"align-text-center\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\", 3, \"ngClass\"], [\"for\", \"username\", 1, \"block\", \"mb-1\"], [\"id\", \"username\", \"formControlName\", \"username\", \"type\", \"text\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"], [\"class\", \"text-red-500 text-sm mt-1\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"block\", \"mb-1\"], [\"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"], [\"class\", \"mb-4\", 3, \"ngClass\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"w-full\", \"p-2\", \"bg-blue-500\", \"text-white\", \"rounded\", \"hover:bg-blue-600\"], [1, \"mt-4\", \"text-center\"], [1, \"text-blue-500\", \"hover:underline\", 3, \"click\"], [1, \"text-red-500\", \"text-sm\", \"mt-1\"], [4, \"ngIf\"], [\"for\", \"email\", 1, \"block\", \"mb-1\"], [\"id\", \"email\", \"formControlName\", \"email\", \"type\", \"email\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"]],\n      template: function AuthModalComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function AuthModalComponent_Template_button_click_2_listener() {\n            return ctx.closeModal();\n          });\n          i0.ɵɵtext(3, \" \\u00D7 \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"h2\", 3);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function AuthModalComponent_Template_form_ngSubmit_6_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"Username\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 7);\n          i0.ɵɵtemplate(11, AuthModalComponent_div_11_Template, 3, 2, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 9);\n          i0.ɵɵtext(14, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"input\", 10);\n          i0.ɵɵtemplate(16, AuthModalComponent_div_16_Template, 3, 2, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, AuthModalComponent_div_17_Template, 5, 4, \"div\", 11);\n          i0.ɵɵelementStart(18, \"button\", 12);\n          i0.ɵɵtext(19);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"div\", 13)(21, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function AuthModalComponent_Template_button_click_21_listener() {\n            return ctx.toggleMode();\n          });\n          i0.ɵɵtext(22);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_3_0;\n          let tmp_5_0;\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Register\" : \"Login\", \" \");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.hasErrors(\"username\")));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.authForm.get(\"username\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.authForm.get(\"username\")) == null ? null : tmp_3_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.hasErrors(\"password\")));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.authForm.get(\"password\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.authForm.get(\"password\")) == null ? null : tmp_5_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isRegisterMode);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Register\" : \"Login\", \" \");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Already have an account? Login\" : \"Don't have an account? Register\", \" \");\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".align-text-center[_ngcontent-%COMP%]{text-align:center}\"]\n    });\n  }\n  return AuthModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}