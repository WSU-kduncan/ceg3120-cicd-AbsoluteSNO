{"ast":null,"code":"import { BehaviorSubject, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./toast.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, toastr) {\n      this.http = http;\n      this.toastr = toastr;\n      this.usersUrl = 'assets/mock-users.json';\n      this.users = [];\n      this.apiUrl = 'https://mockapi.io/users'; // This is a mock URL for demonstration purposes\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadUsers();\n    }\n    // Load users from the local JSON file\n    loadUsers() {\n      this.http.get(this.usersUrl).subscribe({\n        next: users => {\n          this.users = users;\n        },\n        error: error => {\n          console.error('Error loading users', error);\n        }\n      });\n    }\n    // HTTP methods for a mocked API\n    getUserViaHttp() {\n      return this.http.get(`${this.apiUrl}`);\n    }\n    getUserByIdViaHttp(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    addUserViaHttp(user) {\n      return this.http.post(this.apiUrl, user);\n    }\n    updateUserViaHttp(id, user) {\n      return this.http.put(`${this.apiUrl}/${id}`, user);\n    }\n    deleteUserViaHttp(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    // Local data methods using hardcoded JSON\n    getUsers() {\n      // Ensure users are loaded before accessing them\n      if (this.users.length > 0) {\n        return of(this.users);\n      } else {\n        return this.http.get(this.usersUrl).pipe(map(users => {\n          this.users = users;\n          return users;\n        }));\n      }\n    }\n    addUser(user) {\n      user.id = this.getNextAvailableId();\n      this.users.push(user);\n    }\n    // Helper method to determine the next available ID\n    getNextAvailableId() {\n      return this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\n    }\n    updateUser(id, updatedUser) {\n      if (updatedUser.password.match(/\\w{5,10}/) && updatedUser.username.match(/\\w{5,10}/)) {\n        const index = this.users.findIndex(user => user.id === id);\n        if (index !== -1) {\n          this.users[index] = updatedUser;\n          this.setCurrentUser(updatedUser);\n        }\n        this.toastr.showToast({\n          message: 'User Updated',\n          type: 'success'\n        });\n      } else {\n        this.toastr.showToast({\n          message: 'Please make your username / password 5-10 alphanumeric characters',\n          type: 'error'\n        });\n      }\n    }\n    setCurrentUser(user) {\n      this.currentUserSubject.next(user);\n    }\n    userExists(username) {\n      return this.users.some(user => user.username === username);\n    }\n    login(username, password) {\n      return this.users.find(user => user.username === username && user.password === password) || null;\n    }\n    logout() {\n      this.setCurrentUser(null);\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}