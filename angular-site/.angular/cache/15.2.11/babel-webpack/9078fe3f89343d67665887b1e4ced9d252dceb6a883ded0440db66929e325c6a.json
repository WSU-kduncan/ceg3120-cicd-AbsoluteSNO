{"ast":null,"code":"import { User1 } from './shared.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GlobalService = /*#__PURE__*/(() => {\n  class GlobalService {\n    constructor(http) {\n      this.http = http;\n      // TODO: store objects / variables to persist between components\n      this.user = []; // have an array of potential valid users?\n      // showcase utilizing a constructor for class vs interface\n      this.adminUser = new User1('John Doe', 'jdoe@yahoo.net', '123-456-7890', 'Add more articles to the site!');\n      this.emailRegex = /(\\w+@\\w+\\.\\w{3,})*$/; // pattern to match multiple word characters followed by an @ symbol, multiple word characters, followed by a . followed by 3 or more word characters\n      this.phoneRegex = /(\\(\\d\\)\\-)?\\d{3}\\-\\d{3}\\-\\d{4}/g; // pattern to match an optional digit enclosed in parantheses followed by 3 numbers, a dash, 3 numbers, a dash and 4 numbers\n    }\n    // TODO: fill in and correct our http call functions\n    doPost(url, reqBody, headers) {\n      const options = {\n        headers: headers\n      };\n      return this.http.post(url, reqBody, options).pipe(res => {\n        return res;\n      });\n    }\n    doPut(url, reqBody, headers) {\n      const options = {\n        headers: headers\n      };\n      return this.http.put(url, reqBody, options).pipe(res => {\n        return res;\n      });\n    }\n    doGet(url, headers) {\n      const options = {\n        headers: headers\n      };\n      return this.http.get(url, options).pipe(res => {\n        return res;\n      });\n    }\n    static #_ = this.ɵfac = function GlobalService_Factory(t) {\n      return new (t || GlobalService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GlobalService,\n      factory: GlobalService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GlobalService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}